#+title: Plot af data - Matplotlib, Plotly og PyQtGraph
#+options: toc:nil timestamp:nil ^:{}

* Introduktion
Når det kommer til biblioteker til datavisualisering ved hjælp af python, er der et hav af forskellige muligheder. Her nævnes blot at lille udvalg:

** Matplotlib
[[./img/matplotlib_logo.png]]
Har længe været /de facto/-biblioteket, når det har drejet sig om plot af data. Kan producere mange forskellige plots og kan indlejres i mange forskellige grafiske biblioteker, såsom =pyside= og =tkinter=. Standardtemaet ser måske en smule kedeligt ud, men det er blevet nemt hurtigt at ændre det. For nogen kan mængden af nødvendig kode, for at få et godt plot, virke stor, sammenlignet med nogle af de andre biblioteker. Til gengæld har man fuld kontrol over, hvad der skal plottes, og hvor det skal plottes henne.

** Seaborn
[[./img/seaborn_logo.png]]

Seaborn er et bibliotek, som bygger direkte ovenpå matplotlib. Biblioteket blev i første omgang skabt, for at sikre nogle bedre grafiske standardvalg og for at skabe en simplere syntaks (skriv mindre kode for at få et tilsvarende plot som matplotlib). Seaborn er ikke lige så fleksibelt som matplotlib.

** Plotly
[[./img/plotly_logo.png]]

Plotly er det nye sort inden for datavisualisering. Matplotlib og seaborn arbejder mestendels med statiske plots, mens plotlys fordel er, at plottene er interaktive. Det er altså muligt at zoome ind, vise koordinater til punkter og meget andet i plotly. Problemet med plotly er dog det, at det hele foregår ved hjælp webudviklingsværktøjer, at plottene skal vises i en browser.

** PyQtGraph
[[./img/pyqtgraph_logo.png]]

PyQtGraph er et noget simplere bibliotek end de tidligere beskrevne. Til gengæld er det hurtigere, og så er det skræddersyet til at blive indlejret i =pyside=-programmer. Pyside er netop det GUI-bibliotek, som vi har anvendt.

Af disse fire muligheder kommer vi til at koncentrere os om =matplotlib=, =PyQtGraph= og =plotly=.


* Matplotlib
** Installation
Som så mange andre biblioteker, kan matplotlib installeres ved hjælp af pip. Sørg for at arbejde i et *virtuelt miljø* og kør så

#+begin_src bash
pip install matplotlib
#+end_src

** Det første simple plot
Lad os lave et simpelt plot af vores data fra tidligere. Vi tager udgangspunkt i et af de tidligere programmer med indlæsning af data og arbejder videre derfra med matplotlib.

#+begin_src python -n :exports both :results output :eval never-export :comments link :tangle simpelt_plot_med_matplotlib.py
import csv

import matplotlib
import matplotlib.pyplot as plt

tider = []  # Liste som skal indeholde alle tider i float
temperaturer = []  # Liste som skal indeholde alle temperaturer i float
with open("Afkoeling_af_kaffe_nul_grader_udenfor.csv") as datafil:
    csv_laeser = csv.reader(datafil, delimiter=",")
    next(csv_laeser)  # Springer første linje over
    for linje in csv_laeser:
        # På højre side af lighedstegnet anvendes en list comprehension
        # hvor hvert element omdannes til float
        # På venstre side udpakkes den nye liste til variablerne tid og temperatur
        tid, temperatur = [float(element) for element in linje]

        # Tid og temperatur tilføjes til listerne tider og temperaturer
        tider.append(tid)
        temperaturer.append(temperatur)

# Denne del sørger for plot af data
fig, ax = plt.subplots()
ax.plot(tider, temperaturer)
ax.set_title("Kaffens temperatur som funktion af tiden.")
ax.set_xlabel("Tid [min]")
ax.set_ylabel("Temperatur [grader celsius]")
plt.show()
#+end_src

Ved at køre denne kode, skulle I gerne få en figur, som ligner den følgende.

[[./img/simpelt_plot.png]]

Vi kan dog gøre det bedre endnu.

** Et lidt pænere plot

Hvis I nu kører følgende kode, så skulle plottet gerne blive en smule pænere.
#+begin_src python -n :exports both :results output :eval never-export :comments link :tangle paenere_plot_med_matplotlib.py
import csv

import matplotlib
import matplotlib.pyplot as plt

tider = []  # Liste som skal indeholde alle tider i float
temperaturer = []  # Liste som skal indeholde alle temperaturer i float
with open("Afkoeling_af_kaffe_nul_grader_udenfor.csv") as datafil:
    csv_laeser = csv.reader(datafil, delimiter=",")
    next(csv_laeser)  # Springer første linje over
    for linje in csv_laeser:
        # På højre side af lighedstegnet anvendes en list comprehension
        # hvor hvert element omdannes til float
        # På venstre side udpakkes den nye liste til variablerne tid og temperatur
        tid, temperatur = [float(element) for element in linje]

        # Tid og temperatur tilføjes til listerne tider og temperaturer
        tider.append(tid)
        temperaturer.append(temperatur)

# Denne del sørger for plot af data
plt.style.use("seaborn-v0_8")
fig, ax = plt.subplots(layout="constrained")
ax.plot(tider, temperaturer, ".", label="Kaffetemperatur")
ax.set_title("Kaffens temperatur som funktion af tiden.")
ax.set_xlabel("Tid [min]")
ax.set_ylabel(r"Temperatur [${}^\circ C$]")
ax.legend()
plt.show()
#+end_src

Nu skulle resultatet gerne se således ud.

[[./img/paenere_plot.png]]


*Opgave*

Sammenlign koden til de to forskellige plots.

Hver gang I støder på en forskel, så skriv den ned. Hvis der er noget, som I ikke umiddelbart forstår, så forsøg at slå det op, eller spørg ind til det.

Eksperimentér med koden, og se, hvilke ændringer I kan få skabt på plottet.

** Flere plots på én figur
For at få et endnu bedre overblik over vores data kan vi eksperimentere med logaritmiske akser også. Mens vi er i gang, kan vi oprette flere forskellige plots på samme figur.

I det følgende eksempel oprettes der et 2x2 grid til plot af 4 forskellige figurer. Hver af figurerne er døbt =ax1=, =ax2=, =ax3= og =ax4=. 
#+begin_src python -n :exports both :results none :eval never-export :comments link :tangle flere_plots.py
import csv

import matplotlib
import matplotlib.pyplot as plt

tider = []  # Liste som skal indeholde alle tider i float
temperaturer = []  # Liste som skal indeholde alle temperaturer i float
with open("Afkoeling_af_kaffe_nul_grader_udenfor.csv") as datafil:
    csv_laeser = csv.reader(datafil, delimiter=",")
    next(csv_laeser)  # Springer første linje over
    for linje in csv_laeser:
        # På højre side af lighedstegnet anvendes en list comprehension
        # hvor hvert element omdannes til float
        # På venstre side udpakkes den nye liste til variablerne tid og temperatur
        tid, temperatur = [float(element) for element in linje]

        # Tid og temperatur tilføjes til listerne tider og temperaturer
        tider.append(tid)
        temperaturer.append(temperatur)

# Denne del sørger for plot af data
plt.style.use("seaborn-v0_8")
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, layout="constrained")
fig.suptitle("Kaffens temperatur som funktion af tiden")
for ax in (ax1, ax2, ax3, ax4):
    ax.plot(tider, temperaturer, ".", label="Kaffetemperatur")
    ax.set_xlabel("Tid [min]")
    ax.set_ylabel(r"Temperatur [${}^\circ C$]")
    ax.legend()
ax1.set_title("Lineære akser")
ax2.set_title("Lineær x-akse. Logaritmisk y-akse.")
ax2.set_yscale("log")
ax3.set_title("Logaritmisk x-akse. Lineær y-akse.")
ax3.set_xscale("log")
ax4.set_title("Logaritmiske x- og y-akser.")
ax4.set_xscale("log")
ax4.set_yscale("log")
plt.show()
#+end_src

Resultatet skulle gerne ligne dette.

[[./img/flere_plots.png]]


Hvis man har /virkelig/ mange delfigurer, så kan det måske være dumt at navngive den alle sammen. I stedet kan man få et array (eller dobbeltarray), som kan kan referere til med indeks. Det er hvad, der f.eks. sker i det følgende eksempel. Der skulle ikke være forskel på selve resultatet sammenlignet med det tidligere eksempel.
#+begin_src python -n :exports both :results none :eval never-export :comments link :tangle flere_plots_2.py
import csv

import matplotlib
import matplotlib.pyplot as plt

tider = []  # Liste som skal indeholde alle tider i float
temperaturer = []  # Liste som skal indeholde alle temperaturer i float
with open("Afkoeling_af_kaffe_nul_grader_udenfor.csv") as datafil:
    csv_laeser = csv.reader(datafil, delimiter=",")
    next(csv_laeser)  # Springer første linje over
    for linje in csv_laeser:
        # På højre side af lighedstegnet anvendes en list comprehension
        # hvor hvert element omdannes til float
        # På venstre side udpakkes den nye liste til variablerne tid og temperatur
        tid, temperatur = [float(element) for element in linje]

        # Tid og temperatur tilføjes til listerne tider og temperaturer
        tider.append(tid)
        temperaturer.append(temperatur)

# Denne del sørger for plot af data
plt.style.use("seaborn-v0_8")
fig, axs = plt.subplots(2, 2, layout="constrained")
fig.suptitle("Kaffens temperatur som funktion af tiden")
print(axs)
for ax in axs.flatten():
    ax.plot(tider, temperaturer, ".", label="Kaffetemperatur")
    ax.set_xlabel("Tid [min]")
    ax.set_ylabel(r"Temperatur [${}^\circ C$]")
    ax.legend()
axs[0, 0].set_title("Lineære akser")
axs[0, 1].set_title("Lineær x-akse. Logaritmisk y-akse.")
axs[0, 1].set_yscale("log")
axs[1, 0].set_title("Logaritmisk x-akse. Lineær y-akse.")
axs[1, 0].set_xscale("log")
axs[1, 1].set_title("Logaritmiske x- og y-akser.")
axs[1, 1].set_xscale("log")
axs[1, 1].set_yscale("log")
plt.show()
#+end_src

*Opgave*

Eksperimenter med koden i de to foregående eksempler og få ændret layoutet af figurerne, så de alle står på en linje lodret og efterfølgende på en linje vandret. Dette er vist på de to følgende figurer.

[[./img/flere_plots_opgave_1.png]]

[[./img/flere_plots_opgave_2.png]]

** Flere grafer i samme koordinatsystem
Efter at have plottet det samme data i *forskellige koordinatsystemer* er det nu tid til at plotte forskellige data i *samme koordinatsystem*. Til formålet skal vi anvende filen [[./tre_afkoelingskurver.csv]], og den skal ligge i masse mappe som den følgende kodestump.

#+begin_src python -n :exports both :results none :eval never-export :comments link :tangle tre_grafer_i_samme_koordinatsystem.py
import csv

import matplotlib
import matplotlib.pyplot as plt

tider = []  # Liste, som skal indeholde alle tider i float
# Lister, som skal indeholde temperatuerne for hver af de 3 kaffer
temperaturer_1 = []
temperaturer_2 = []
temperaturer_3 = []

with open("tre_afkoelingskurver.csv") as datafil:
    csv_laeser = csv.reader(datafil, delimiter=",")
    next(csv_laeser)  # Springer første linje over
    for linje in csv_laeser:
        # På højre side af lighedstegnet anvendes en list comprehension
        # hvor hvert element omdannes til float
        # På venstre side udpakkes den nye liste til variablen tid og listen temperaturer
        tid, temp_1, temp_2, temp_3 = [float(element) for element in linje]

        # Tid og temperatur tilføjes til listerne tider og temperaturer
        tider.append(tid)
        temperaturer_1.append(temp_1)
        temperaturer_2.append(temp_2)
        temperaturer_3.append(temp_3)

# Denne del sørger for plot af data
plt.style.use("seaborn-v0_8")
fig, ax = plt.subplots(layout="constrained")
ax.plot(tider, temperaturer_1, ".", label="Kaffe 1")
ax.plot(tider, temperaturer_2, ".", label="Kaffe 2")
ax.plot(tider, temperaturer_3, ".", label="Kaffe 3")
ax.set_title("Kaffens temperatur som funktion af tiden.")
ax.set_xlabel("Tid [min]")
ax.set_ylabel(r"Temperatur [${}^\circ C$]")
ax.legend()
plt.show()

#+end_src

*Opgave*

Følgende kodestump viser den samme figur, som i forrige eksempel, men valget af datatyper og kontrolstrukturer er anderledes. *Gennemgå kodestumpen, og find ud af hvilke nye datatyper, der anvendes, og hvordan koden er blevet mere automatiseret.*

#+begin_src python -n :exports both :results none :eval never-export :comments link :tangle tre_grafer_i_samme_koordinatsystem_opgave.py
import csv

import matplotlib
import matplotlib.pyplot as plt

tider = []  # Liste som skal indeholde alle tider i float
# Dict som skal indeholde en liste af alle temperaturer i float for hver kaffe
temperaturer = {1: [], 2: [], 3: [],}  with open("tre_afkoelingskurver.csv") as datafil:
    csv_laeser = csv.reader(datafil, delimiter=",")
    next(csv_laeser)  # Springer første linje over
    for linje in csv_laeser:
        # På højre side af lighedstegnet anvendes en list comprehension
        # hvor hvert element omdannes til float
        # På venstre side udpakkes den nye liste til variablen tid og listen temperaturer
        tid, *_temperaturer = [float(element) for element in linje]

        # Tid og temperatur tilføjes til listerne tider og temperaturer
        tider.append(tid)
        for run, temp in zip(temperaturer, _temperaturer):
            temperaturer[run].append(temp)

# Denne del sørger for plot af data
plt.style.use("seaborn-v0_8")
fig, ax = plt.subplots(layout="constrained")
for nummer, _temperaturer in temperaturer.items():
    ax.plot(tider, _temperaturer, ".", label=f"Kaffe {nummer}")
ax.set_title("Kaffens temperatur som funktion af tiden.")
ax.set_xlabel("Tid [min]")
ax.set_ylabel(r"Temperatur [${}^\circ C$]")
ax.legend()
plt.show()
#+end_src



